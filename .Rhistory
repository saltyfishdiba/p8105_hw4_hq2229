) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, 700)),
showlegend = TRUE
)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(plotly)
library(flexdashboard)
library(p8105.datasets)
library(lubridate)
library(RColorBrewer)
set.seed(8105)
# load dataset (name is ny_noaa)
data("ny_noaa", package = "p8105.datasets")
# --- Working subset for interactive scatter (2010–2015) ---
wx <- ny_noaa %>%
mutate(
tmax = as.numeric(tmax) / 10,   # tenths °C -> °C
tmin = as.numeric(tmin) / 10,
prcp = as.numeric(prcp),
snow = as.numeric(snow),
snwd = as.numeric(snwd),
date = as.Date(date)
) %>%
filter(date >= as.Date("2010-01-01"), date < as.Date("2016-01-01")) %>%
mutate(
year  = year(date),
month = month(date, label = TRUE, abbr = TRUE) |> factor(ordered = TRUE)
)
wx_sample <- wx %>%
filter(!is.na(tmax), !is.na(tmin)) %>%
sample_n(size = min(120000, nrow(.)))
# colors for months (used in scatter)
month_cols <- brewer.pal(12, "Set3")[seq_len(nlevels(wx$month))]
names(month_cols) <- levels(wx$month)
# --- Plot 2: Total annual precipitation (FULL time range) ---
annual_prcp <- ny_noaa %>%
mutate(prcp = as.numeric(prcp), date = as.Date(date), year = year(date)) %>%
group_by(year) %>%
summarize(total_prcp = sum(prcp, na.rm = TRUE), .groups = "drop") %>%
arrange(year)
# --- Plot 3: Snowfall box plot across high-coverage stations ---
snow_stations <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(!is.na(snow), snow >= 0) %>%
count(id, sort = TRUE) %>%
slice_head(n = 6) %>%
pull(id)
snow_box <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(id %in% snow_stations, !is.na(snow), snow >= 0) %>%
mutate(id = factor(id, levels = snow_stations))
plot_ly(
wx_sample,
x = ~tmin, y = ~tmax,
type = "scattergl", mode = "markers",
marker = list(size = 4, opacity = 0.45),
color = ~month, colors = unname(month_cols),
text = ~paste0(
"<b>Date:</b> ", date,
"<br><b>Station:</b> ", id,
"<br><b>Tmin:</b> ", round(tmin, 1), " °C",
"<br><b>Tmax:</b> ", round(tmax, 1), " °C"
),
hoverinfo = "text"
) %>%
layout(
title = "Daily Tmin vs Tmax (2010–2015 subset)",
xaxis = list(title = "Tmin (°C)"),
yaxis = list(title = "Tmax (°C)"),
legend = list(orientation = "h", x = 0, y = -0.15),
margin = list(l = 60, r = 20, t = 60, b = 60)
)
plot_ly(
annual_prcp,
x = ~year,
y = ~total_prcp,
type = "bar",
marker = list(
color = ~year,
colorscale = "Viridis",
showscale = TRUE,
colorbar = list(title = "year")
),
hovertemplate = paste(
"<b>Year:</b> %{x}",
"<br><b>Total precipitation:</b> %{y:.0f} mm",
"<extra></extra>"
)
) %>%
layout(
title = "Total Annual Precipitation",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Precipitation (mm)")
)
plot_ly(
snow_box,
x = ~id, y = ~snow,
type = "box",
boxpoints = "outliers",
jitter = 0, pointpos = 0,
color = ~id,
colors = RColorBrewer::brewer.pal(max(3, length(levels(snow_box$id))), "Set2"),
hovertemplate = paste(
"<b>Station:</b> %{x}",
"<br><b>Snowfall:</b> %{y:.0f} mm",
"<extra></extra>"
)
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, 700)),
showlegend = TRUE
)
### Plot 3 — Box Plot (Snowfall, y ≤ 700) — with visible boxes
plot_ly(
snow_box,
x = ~id, y = ~snow,
type = "box",
color = ~id,
colors = RColorBrewer::brewer.pal(max(3, length(levels(snow_box$id))), "Set2"),
boxpoints = "outliers",   # only outliers as points
pointpos = 0,             # overlay on box
jitter = 0,               # no jitter since we only show outliers
boxmean = TRUE,           # show mean line
notched = TRUE,           # make the box shape obvious
marker = list(size = 4, opacity = 0.5),
line = list(width = 2),   # thicker box outline
fillcolor = "rgba(0,0,0,0)"  # transparent fill so outline pops
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, 700)),
showlegend = TRUE
)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(tidyverse)
library(plotly)
library(flexdashboard)
library(p8105.datasets)
library(lubridate)
library(RColorBrewer)
set.seed(8105)
# load dataset (name is ny_noaa)
data("ny_noaa", package = "p8105.datasets")
# --- Working subset for interactive scatter (2010–2015) ---
wx <- ny_noaa %>%
mutate(
tmax = as.numeric(tmax) / 10,   # tenths °C -> °C
tmin = as.numeric(tmin) / 10,
prcp = as.numeric(prcp),
snow = as.numeric(snow),
snwd = as.numeric(snwd),
date = as.Date(date)
) %>%
filter(date >= as.Date("2010-01-01"), date < as.Date("2016-01-01")) %>%
mutate(
year  = year(date),
month = month(date, label = TRUE, abbr = TRUE) |> factor(ordered = TRUE)
)
wx_sample <- wx %>%
filter(!is.na(tmax), !is.na(tmin)) %>%
sample_n(size = min(120000, nrow(.)))
# colors for months (used in scatter)
month_cols <- brewer.pal(12, "Set3")[seq_len(nlevels(wx$month))]
names(month_cols) <- levels(wx$month)
# --- Plot 2: Total annual precipitation (FULL time range) ---
annual_prcp <- ny_noaa %>%
mutate(prcp = as.numeric(prcp), date = as.Date(date), year = year(date)) %>%
group_by(year) %>%
summarize(total_prcp = sum(prcp, na.rm = TRUE), .groups = "drop") %>%
arrange(year)
# --- Plot 3: Snowfall box plot across high-coverage stations ---
snow_stations <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(!is.na(snow), snow >= 0) %>%
count(id, sort = TRUE) %>%
slice_head(n = 6) %>%
pull(id)
snow_box <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(id %in% snow_stations, !is.na(snow), snow >= 0) %>%
mutate(id = factor(id, levels = snow_stations))
plot_ly(
wx_sample,
x = ~tmin, y = ~tmax,
type = "scattergl", mode = "markers",
marker = list(size = 4, opacity = 0.45),
color = ~month, colors = unname(month_cols),
text = ~paste0(
"<b>Date:</b> ", date,
"<br><b>Station:</b> ", id,
"<br><b>Tmin:</b> ", round(tmin, 1), " °C",
"<br><b>Tmax:</b> ", round(tmax, 1), " °C"
),
hoverinfo = "text"
) %>%
layout(
title = "Daily Tmin vs Tmax (2010–2015 subset)",
xaxis = list(title = "Tmin (°C)"),
yaxis = list(title = "Tmax (°C)"),
legend = list(orientation = "h", x = 0, y = -0.15),
margin = list(l = 60, r = 20, t = 60, b = 60)
)
plot_ly(
annual_prcp,
x = ~year,
y = ~total_prcp,
type = "bar",
marker = list(
color = ~year,
colorscale = "Viridis",
showscale = TRUE,
colorbar = list(title = "year")
),
hovertemplate = paste(
"<b>Year:</b> %{x}",
"<br><b>Total precipitation:</b> %{y:.0f} mm",
"<extra></extra>"
)
) %>%
layout(
title = "Total Annual Precipitation",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Precipitation (mm)")
)
### Plot 3 — Box Plot (Snowfall, y ≤ 700) — with visible boxes
plot_ly(
snow_box,
x = ~id, y = ~snow,
type = "box",
color = ~id,
colors = RColorBrewer::brewer.pal(max(3, length(levels(snow_box$id))), "Set2"),
boxpoints = "outliers",   # only outliers as points
pointpos = 0,             # overlay on box
jitter = 0,               # no jitter since we only show outliers
boxmean = TRUE,           # show mean line
notched = TRUE,           # make the box shape obvious
marker = list(size = 4, opacity = 0.5),
line = list(width = 2),   # thicker box outline
fillcolor = "rgba(0,0,0,0)"  # transparent fill so outline pops
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, 700)),
showlegend = TRUE
)
### Plot 3 — Box Plot (Snowfall, y ≤ 700) — with visible boxes
plot_ly(
snow_box,
x = ~id, y = ~snow,
type = "box",
color = ~id,
colors = RColorBrewer::brewer.pal(max(3, length(levels(snow_box$id))), "Set2"),
boxpoints = "outliers",   # only outliers as points
pointpos = 0,             # overlay on box
jitter = 0,               # no jitter since we only show outliers
boxmean = TRUE,           # show mean line
notched = TRUE,           # make the box shape obvious
marker = list(size = 4, opacity = 0.5),
line = list(width = 2),   # thicker box outline
fillcolor = "rgba(0,0,0,0)"  # transparent fill so outline pops
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, 600)),
showlegend = TRUE
)
### Plot 3 — Snowfall Box Plot (styled like your image)
# palette per-station (filled boxes)
pal <- setNames(
RColorBrewer::brewer.pal(max(3, length(levels(snow_box$id))), "Set2"),
levels(snow_box$id)
)
plot_ly(
snow_box,
x = ~id, y = ~snow,
type = "box",
color = ~id,                        # legend like your image
colors = unname(pal),
boxpoints = "all",                  # show all points, not just outliers
jitter = 0.3,                       # slight jitter so points don’t stack
pointpos = 0,                       # centered on the box
marker = list(size = 5, opacity = 0.6),
line = list(width = 2, color = "rgba(0,0,0,0.6)"),
boxmean = TRUE,                     # show mean line inside box
notched = FALSE,
fillcolor = ~I(pal[as.character(id)]),  # colored box fill
opacity = 0.9
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, 700)),
showlegend = TRUE
)
### Plot 3 — Snowfall Box Plot (clean legend & clear boxes)
pal <- setNames(
RColorBrewer::brewer.pal(max(3, length(levels(snow_box$id))), "Set2"),
levels(snow_box$id)
)
plot_ly(
snow_box,
x = ~id, y = ~snow,
type = "box",
split = ~id,                     # one box per station (clean legend)
color = ~id, colors = unname(pal),
boxpoints = "all",               # show all points
jitter = 0.28, pointpos = 0,     # light jitter over the box
marker = list(size = 4, opacity = 0.55),
line = list(width = 2),          # thicker box outlines
boxmean = TRUE                   # show mean line
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, 700)),
showlegend = TRUE
)
### Chart C — Snowfall Distribution (your stations, Viridis, 99th cap)
# pick the stations you listed
stations <- c("US1NYAB0001","US1NYAB0006","US1NYAB0010","US1NYAB0016",
"US1NYAB0017","US1NYAB0021","US1NYAB0022")
# tidy data and compute the 99th percentile cap
snow_df <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(id %in% stations, !is.na(snow), snow != 0)
q99 <- quantile(snow_df$snow, 0.99, na.rm = TRUE)
# reorder station factor by median snowfall
snow_df <- snow_df %>%
mutate(id = forcats::fct_reorder(id, snow, .fun = median))
# discrete Viridis colors for the stations
vir_cols <- viridisLite::viridis(length(levels(snow_df$id)))
names(vir_cols) <- levels(snow_df$id)
plot_ly(
snow_df,
x = ~id, y = ~snow,
type = "box",
color = ~id,
colors = unname(vir_cols),
boxpoints = "outliers",
jitter = 0, pointpos = 0,
line = list(width = 2),
boxmean = TRUE
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, q99))  # <- cap at 99th pct
)
q99 <- quantile(noaa$snow, 0.99, na.rm = TRUE)
### Chart C — Snowfall Distribution (your stations, Viridis, 99th cap)
# pick the stations you listed
stations <- c("US1NYAB0001","US1NYAB0006","US1NYAB0010","US1NYAB0016",
"US1NYAB0017","US1NYAB0021","US1NYAB0022")
# tidy data and compute the 99th percentile cap
snow_df <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(id %in% stations, !is.na(snow), snow != 0)
q99 <- quantile(snow_df$snow, 0.99, na.rm = TRUE)
# reorder station factor by median snowfall
snow_df <- snow_df %>%
mutate(id = forcats::fct_reorder(id, snow, .fun = median))
# discrete Viridis colors for the stations
vir_cols <- viridisLite::viridis(length(levels(snow_df$id)))
names(vir_cols) <- levels(snow_df$id)
plot_ly(
snow_df,
x = ~id, y = ~snow,
type = "box",
color = ~id,
colors = unname(vir_cols),
boxpoints = "outliers",
jitter = 0, pointpos = 0,
line = list(width = 2),
boxmean = TRUE
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, q99))  # <- cap at 99th pct
)
library(flexdashboard)
library(tidyverse)
library(p8105.datasets)
library(plotly)
library(dplyr)
data("ny_noaa")
noaa = ny_noaa |>
janitor::clean_names() |>
mutate(
tmin = as.numeric(tmin),
tmax = as.numeric(tmax),
prcp = as.numeric(prcp),
date = ymd(date),
year = year(date),
month = month(date),
tmin = tmin / 10,    #regulate unit
tmax = tmax / 10,
prcp =  prcp / 10
)
noaa |>
group_by(year) |>
summarise(
mean_tmin = mean(tmin, na.rm = TRUE),
mean_tmax = mean(tmax, na.rm = TRUE)
) |>
plot_ly(x = ~year, y = ~mean_tmax, type = 'scatter', mode = 'lines+markers', name = 'Tmax (°C)', colors = "viridis") |>
add_trace(x = ~year, y = ~mean_tmin, type = 'scatter', mode = 'lines+markers', name = 'Tmax (°C)', colors = "viridis") |>
layout(title = 'Annual Mean of max and min temperature',
xaxis = list(title = 'Year'),
yaxis = list(title = 'Temperature (°C)'))
noaa |>
group_by(year) |>
summarise(total_prcp = sum(prcp, na.rm = TRUE)) |>
plot_ly(
x = ~ year,
y = ~ total_prcp,
color = ~ year,
type = "bar",
colors = "viridis"
) |>
layout(
title = "Total Annual Precipitation",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Precipitation (mm)")
)
q99 <- quantile(noaa$snow, 0.99, na.rm = TRUE)
noaa |>
filter(!is.na(snow) & snow != 0) |>
filter(id %in% c("US1NYAB0001", "US1NYAB0006", "US1NYAB0010", "US1NYAB0016", "US1NYAB0017", "US1NYAB0021", "US1NYAB0022")) |>
mutate(id = fct_reorder(id, snow, .fun = median)) |>
plot_ly(
y = ~snow,
color = ~id,
type = "box",
colors = "viridis"
) |>
layout(
title = "Snowfall Distribution",
yaxis = list(title = "Snowfall (mm)", ange = c(0, q99) ),
xaxis = list(title = "Station ID")
)
### Chart C — Snowfall Distribution (your stations, Viridis, 99th cap)
# pick the stations you listed
stations <- c("US1NYAB0022", "US1NYAB0021","US1NYAB0017","US1NYAB0016","US1NYAB0010", "US1NYAB0006","US1NYAB0001"              )
# tidy data and compute the 99th percentile cap
snow_df <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(id %in% stations, !is.na(snow), snow != 0)
q99 <- quantile(snow_df$snow, 0.99, na.rm = TRUE)
# reorder station factor by median snowfall
snow_df <- snow_df %>%
mutate(id = forcats::fct_reorder(id, snow, .fun = median))
# discrete Viridis colors for the stations
vir_cols <- viridisLite::viridis(length(levels(snow_df$id)))
names(vir_cols) <- levels(snow_df$id)
plot_ly(
snow_df,
x = ~id, y = ~snow,
type = "box",
color = ~id,
colors = unname(vir_cols),
boxpoints = "outliers",
jitter = 0, pointpos = 0,
line = list(width = 2),
boxmean = TRUE
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, q99))  # <- cap at 99th pct
)
### Plot 3 — Snowfall Distribution (7 stations, Set2 palette, 99th-pct cap)
# stations you listed
stations <- c(
"US1NYAB0001","US1NYAB0006","US1NYAB0010",
"US1NYAB0016","US1NYAB0017","US1NYAB0021","US1NYAB0022"
)
# tidy + reorder by median snowfall
snow_df <- ny_noaa %>%
mutate(snow = as.numeric(snow)) %>%
filter(id %in% stations, !is.na(snow), snow != 0)
q99 <- quantile(snow_df$snow, 0.99, na.rm = TRUE)
snow_df <- snow_df %>%
mutate(id = forcats::fct_reorder(id, snow, .fun = median))
# color palette (soft & readable)
pal <- RColorBrewer::brewer.pal(max(3, length(levels(snow_df$id))), "Set2")
names(pal) <- levels(snow_df$id)
plot_ly(
snow_df,
x = ~id, y = ~snow,
type = "box",
color = ~id, colors = unname(pal),
boxpoints = "outliers",
jitter = 0, pointpos = 0,
line = list(width = 2),
boxmean = TRUE
) %>%
layout(
title = "Snowfall Distribution",
xaxis = list(title = "Station ID", tickangle = -45),
yaxis = list(title = "Snowfall (mm)", range = c(0, q99)),
showlegend = TRUE
)
